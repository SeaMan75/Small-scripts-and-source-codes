using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using DrawingSize = System.Drawing.Size;
using DrawingPoint = System.Drawing.Point;
using MessageBox = System.Windows.Forms.MessageBox;

#pragma warning disable CS1591  // Missing XML comment for publicly visible type
                                // or member

namespace main {
	public static class WindowHelper {
		public static string lastErrorMessage = "";
		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
		
		[StructLayout(LayoutKind.Sequential)]
		public struct RECT {
			public int Left;
			public int Top;
			public int Right;
			public int Bottom;
		}
		
		public static bool MoveWindowLeft(int dx, int dy,
										  string name, string cn, WOwner of = default) {
			int screenWidth;
			int screenHeight;
			bool result = true;
			
			try {
				var hwnd = wnd.find(1, name, cn, of).Activate();
				// Получаем размеры экрана
				screenWidth = Screen.PrimaryScreen.Bounds.Width - dx;
				screenHeight = Screen.PrimaryScreen.Bounds.Height - dy;
				// Располагаем w1 в левой части экрана
				hwnd.Move(0, 0, screenWidth / 2, screenHeight);
			}
			catch (Exception ex) {
				lastErrorMessage = ex.Message;
				result = false;
			}
			return result;
		}
		
		public static bool MoveWindowRight(int dx, int dy,
										   string name, string cn, WOwner of = default) {
			int screenWidth;
			int screenHeight;
			bool result = true;
			
			try {
				var hwnd = wnd.find(1, name, cn, of).Activate();
				// Получаем размеры экрана
				screenWidth = Screen.PrimaryScreen.Bounds.Width - dx;
				screenHeight = Screen.PrimaryScreen.Bounds.Height - dy;
				// Располагаем в левой части экрана
				hwnd.Move(screenWidth / 2 + dx, 0, screenWidth / 2, screenHeight);
			}
			catch (Exception) {
				result = false;
			}
			return result;
		}
		
		public static bool MoveWindowCenter(string name, string cn, WOwner of = default) {
			int screenWidth;
			int screenHeight;
			bool result = true;
			
			try {
				var hwnd = wnd.find(1, name, cn, of).Activate();
				IntPtr hWndPtr = hwnd.Handle; // Предполагаем, что у hwnd есть свойство Handle для получения IntPtr
				// Получаем размеры экрана
				screenWidth = Screen.PrimaryScreen.Bounds.Width;
				screenHeight = Screen.PrimaryScreen.Bounds.Height;
				// Получаем размеры окна
				RECT rect;
				
				if (GetWindowRect(hWndPtr, out rect)) {
					int windowWidth = rect.Right - rect.Left;
					int windowHeight = rect.Bottom - rect.Top;
					
					// Располагаем окно в центре экрана
					hwnd.Move((screenWidth - windowWidth) / 2,
							  (screenHeight - windowHeight) / 2, windowWidth,
							  windowHeight);
				} else {
					result = false;
				}
			}
			catch (Exception) {
				result = false;
			}
			return result;
		}
		
		public static void FindAndLocateWindows(int dx, int dy, (string, string) path
						, string name1, string cn1, string name2, string cn2, WOwner of1 = default, WOwner of2 = default) {
			
			if (!MoveWindowLeft(dx, dy, name1, cn1, of1)) {
				System.Diagnostics.Process.Start($"{path.Item1}");
				MoveWindowLeft(dx, dy, name1, cn1, of1);
			}
			if (!MoveWindowRight(dx, dy, name2, cn2, of2)) {
				System.Diagnostics.Process.Start($"{path.Item2}");
				MoveWindowRight(dx, dy, name2, cn2, of2);
			}
		}
		
		public static void FindAndLocateWindow(string path, string name, string cn, WOwner of = default) {
			
			if (!MoveWindowCenter(name, cn, of)) {
				System.Diagnostics.Process.Start($"{path}");
				MoveWindowCenter(name, cn, of);
			}
		}
		
		public class Program {
			
			const string TOTAL_COMMANDER_PATH = @"C:\Total Commander Extended\Totalcmd64.exe";
			const string OPERA_PATH = @"C:\Users\bgnic\AppData\Local\Programs\Opera\opera.exe";
			const string TODO_PATH = @"C:\Users\bgnic\AppData\Local\Swift\To-Do List\Swift To-Do List.exe";
			const string WORD_PATH = @"C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE";
			const string SKYPE_PATH = @"C:\Program Files\WindowsApps\Microsoft.SkypeApp_15.132.3201.0_x64__kzf8qxf38zg5c\Skype\Skype.exe";
			const string PYCHARM_PATH = @"C:\Program Files\JetBrains\PyCharm2024.3\bin\pycharm64.exe";
			const string SUBLIME_PATH = @"C:\Program Files\Sublime Text\sublime_text.exe";
			
			static void Main() {
				script.setup(trayIcon: true, sleepExit: true);
				var form = new Form();
				form.Text = "Helper";
				form.Size = new DrawingSize(400, 400);
				form.TopMost = true;
				
				form.Load += (sender, e) => form.Location = new DrawingPoint(3000, 1600);
				
				var button1 =
					CreateButton(form, @"Total Commander and Browser",
								 new DrawingPoint(10, 10), (sender, e) => FindWindow1());
				var button2 =
					CreateButton(form, "TODO! and Total Commander",
								 new DrawingPoint(10, 50), (sender, e) => FindWindow2());
				var button3 = CreateButton(form, "MS Word", new DrawingPoint(10, 90),
										   (sender, e) => FindWindow3());
				var button4 =
					CreateButton(form, "Skype and PyCharm", new DrawingPoint(10, 130),
								 (sender, e) => FindWindow4());
				var button5 =
					CreateButton(form, "Sublime and PyCharm", new DrawingPoint(10, 170),
								 (sender, e) => FindWindow5());
				var button6 =
					CreateButton(form, "Skype and Sublime", new DrawingPoint(10, 210),
								 (sender, e) => FindWindow6());
				
				form.ShowDialog();
			}
			
			static Button CreateButton(Control parent, string buttonText,
									   DrawingPoint location,
									   EventHandler clickHandler) {
				var button = new Button();
				button.Text = buttonText;
				button.Location = location;
				button.AutoSize = true;
				button.Click += clickHandler;
				parent.Controls.Add(button);
				return button;
			}
			
			static void FindWindow1() {
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (TOTAL_COMMANDER_PATH, OPERA_PATH),
					name1: "Total Commander (x64) 11.03*",
					cn1: "TTOTAL_CMD",
					name2: "*",
					cn2: "Chrome_WidgetWin_1",
					of1: default,
					of2: "opera.exe"
				);
			}
			
			static void FindWindow2() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (TODO_PATH, TOTAL_COMMANDER_PATH),
					name1: "Swift To-Do List 11*",
					cn1: "*.Window.*",
					name2: "Total Commander (x64) 11.03*",
					cn2: "TTOTAL_CMD",
					of1: default,
					of2: default
				);
			}
			
			static void FindWindow3() {
				
				FindAndLocateWindow(
					path: WORD_PATH,
					name: "*Word",
					cn: "OpusApp"
				);
			}
			
			static void FindWindow4() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (SKYPE_PATH, PYCHARM_PATH),
					name1: "Skype",
					cn1: "Chrome_WidgetWin_1",
					name2: "*",
					cn2: "SunAwtFrame",
					of1: default,
					of2: default
				);
			}
			
			static void FindWindow5() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (SUBLIME_PATH, PYCHARM_PATH),
					name1: "*",
					cn1: "PX_WINDOW_CLASS",
					name2: "*",
					cn2: "SunAwtFrame",
					of1: default,
					of2: default
				);
			}
				static void FindWindow6() {
					
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (SKYPE_PATH, SUBLIME_PATH),
					name1: "Skype",
					cn1: "Chrome_WidgetWin_1",
					name2: "*",
					cn2: "PX_WINDOW_CLASS",
					of1: default,
					of2: default
					);
				}
			}
		}
}
