using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using DrawingSize = System.Drawing.Size;
using DrawingPoint = System.Drawing.Point;
using MessageBox = System.Windows.Forms.MessageBox;

#pragma warning disable CS1591  // Missing XML comment for publicly visible type
                                // or member

namespace main {
	public static class WindowHelper {
		public static string lastErrorMessage = "";
		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
		
		[StructLayout(LayoutKind.Sequential)]
		public struct RECT {
			public int Left;
			public int Top;
			public int Right;
			public int Bottom;
		}
		
		public static bool MoveWindowLeft(int dx, int dy,
										  string name, string cn, WOwner of = default) {
			int screenWidth;
			int screenHeight;
			bool result = true;
			
			try {
				var hwnd = wnd.find(1, name, cn, of).Activate();
				// Получаем размеры экрана
				screenWidth = Screen.PrimaryScreen.Bounds.Width - dx;
				screenHeight = Screen.PrimaryScreen.Bounds.Height - dy;
				// Располагаем w1 в левой части экрана
				hwnd.Move(0, 0, screenWidth / 2, screenHeight);
			}
			catch (Exception ex) {
				lastErrorMessage = ex.Message;
				result = false;
			}
			return result;
		}
		
		public static bool MoveWindowRight(int dx, int dy,
										   string name, string cn, WOwner of = default) {
			int screenWidth;
			int screenHeight;
			bool result = true;
			
			try {
				var hwnd = wnd.find(1, name, cn, of).Activate();
				// Получаем размеры экрана
				screenWidth = Screen.PrimaryScreen.Bounds.Width - dx;
				screenHeight = Screen.PrimaryScreen.Bounds.Height - dy;
				// Располагаем в левой части экрана
				hwnd.Move(screenWidth / 2 + dx, 0, screenWidth / 2, screenHeight);
			}
			catch (Exception) {
				result = false;
			}
			return result;
		}
		
		public static bool MoveWindowCenter(string name, string cn, WOwner of = default) {
			int screenWidth;
			int screenHeight;
			bool result = true;
			
			try {
				var hwnd = wnd.find(1, name, cn, of).Activate();
				IntPtr hWndPtr = hwnd.Handle; // Предполагаем, что у hwnd есть свойство Handle для получения IntPtr
				// Получаем размеры экрана
				screenWidth = Screen.PrimaryScreen.Bounds.Width;
				screenHeight = Screen.PrimaryScreen.Bounds.Height;
				// Получаем размеры окна
				RECT rect;
				
				if (GetWindowRect(hWndPtr, out rect)) {
					int windowWidth = rect.Right - rect.Left;
					int windowHeight = rect.Bottom - rect.Top;
					
					// Располагаем окно в центре экрана
					hwnd.Move((screenWidth - windowWidth) / 2,
							  (screenHeight - windowHeight) / 2, windowWidth,
							  windowHeight);
				} else {
					result = false;
				}
			}
			catch (Exception) {
				result = false;
			}
			return result;
		}
		
		public static void FindAndLocateWindows(int dx, int dy, (string, string) path
						, string name1, string cn1, string name2, string cn2, WOwner of1 = default, WOwner of2 = default) {
			
			if (!MoveWindowLeft(dx, dy, name1, cn1, of1)) {
				System.Diagnostics.Process.Start($"{path.Item1}");
				MoveWindowLeft(dx, dy, name1, cn1, of1);
			}
			if (!MoveWindowRight(dx, dy, name2, cn2, of2)) {
				System.Diagnostics.Process.Start($"{path.Item2}");
				MoveWindowRight(dx, dy, name2, cn2, of2);
			}
		}
		
		public static void FindAndLocateWindow(string path, string name, string cn, WOwner of = default) {
			
			if (!MoveWindowCenter(name, cn, of)) {
				System.Diagnostics.Process.Start($"{path}");
				MoveWindowCenter(name, cn, of);
			}
		}
		
		public class Program {
			
			// Импортируем необходимые функции из user32.dll
			[DllImport("user32.dll")]
			public static extern bool ReleaseCapture();
			[DllImport("user32.dll")]
			public static extern IntPtr SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

			const int WM_NCLBUTTONDOWN = 0xA1;
			const int HTCAPTION = 0x2;
			
			const string TOTAL_COMMANDER_PATH = @"C:\Total Commander Extended\Totalcmd64.exe";
			const string OPERA_PATH = @"C:\Users\bgnic\AppData\Local\Programs\Opera\opera.exe";
			const string TODO_PATH = @"C:\Users\bgnic\AppData\Local\Swift\To-Do List\Swift To-Do List.exe";
			const string WORD_PATH = @"C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE";
			const string SKYPE_PATH = @"C:\Program Files\WindowsApps\Microsoft.SkypeApp_15.132.3201.0_x64__kzf8qxf38zg5c\Skype\Skype.exe";
			const string PYCHARM_PATH = @"C:\Program Files\JetBrains\PyCharm2024.3\bin\pycharm64.exe";
			const string SUBLIME_PATH = @"C:\Program Files\Sublime Text\sublime_text.exe";
			const string NETBEANS_PATH = @"C:\Program Files\NetBeans-23\netbeans\bin\netbeans64.exe";
			
			static void Main() {
				script.setup(trayIcon: true, sleepExit: true);
				var form = new Form();
				form.Text = "Helper";
				form.Size = new DrawingSize(400, 400);
				form.TopMost = true;
				
				form.Load += (sender, e) => form.Location = new DrawingPoint(3000, 1600);
				
				// Добавляем обработчик события MouseDown для формы
				form.MouseDown += (sender, e) => {
					if (e.Button == MouseButtons.Left) {
						ReleaseCapture();
						SendMessage(form.Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
					}
				};
				
				var button1 =
					CreateButton(form, @"Total Commander and Browser",
								 new DrawingPoint(10, 10), (sender, e) => FindWindow1());
				var button2 =
					CreateButton(form, "TODO! and Total Commander",
								 new DrawingPoint(10, 50), (sender, e) => FindWindow2());
				var button3 = CreateButton(form, "MS Word", new DrawingPoint(10, 90),
										   (sender, e) => FindWindow3());
				var button4 =
					CreateButton(form, "Skype and PyCharm", new DrawingPoint(10, 130),
								 (sender, e) => FindWindow4());
				var button5 =
					CreateButton(form, "Sublime and PyCharm", new DrawingPoint(10, 170),
								 (sender, e) => FindWindow5());
				var button6 =
					CreateButton(form, "Skype and Sublime", new DrawingPoint(10, 210),
								 (sender, e) => FindWindow6());
				var button7 =
					CreateButton(form, "admin", new DrawingPoint(10, 250),
								 (sender, e) => Click1());
				var button8 =
					CreateButton(form, "Total Commander - Net Beans", new DrawingPoint(10, 290),
								 (sender, e) => FindWindow8());
				
				
				form.ShowDialog();
			}
			
			#region CreateButton
			static Button CreateButton(Control parent, string buttonText,
									   DrawingPoint location,
									   EventHandler clickHandler) {
				var button = new Button();
				button.Text = buttonText;
				button.Location = location;
				button.AutoSize = true;
				button.Click += clickHandler;
				parent.Controls.Add(button);
				return button;
			}
			
			static void FindWindow1() {
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (TOTAL_COMMANDER_PATH, OPERA_PATH),
					name1: "Total Commander (x64) 11.03*",
					cn1: "TTOTAL_CMD",
					name2: "*",
					cn2: "Chrome_WidgetWin_1",
					of1: default,
					of2: "opera.exe"
				);
			}
			
			static void FindWindow2() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (TODO_PATH, TOTAL_COMMANDER_PATH),
					name1: "Swift To-Do List 11*",
					cn1: "*.Window.*",
					name2: "Total Commander (x64) 11.03*",
					cn2: "TTOTAL_CMD",
					of1: default,
					of2: default
				);
			}
			
			static void FindWindow3() {
				
				FindAndLocateWindow(
					path: WORD_PATH,
					name: "*Word",
					cn: "OpusApp"
				);
			}
			
			static void FindWindow4() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (SKYPE_PATH, PYCHARM_PATH),
					name1: "Skype",
					cn1: "Chrome_WidgetWin_1",
					name2: "*",
					cn2: "SunAwtFrame",
					of1: default,
					of2: default
				);
			}
			
			static void FindWindow5() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (SUBLIME_PATH, PYCHARM_PATH),
					name1: "*",
					cn1: "PX_WINDOW_CLASS",
					name2: "*",
					cn2: "SunAwtFrame",
					of1: default,
					of2: default
				);
			}
			static void FindWindow6() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (SKYPE_PATH, SUBLIME_PATH),
					name1: "Skype",
					cn1: "Chrome_WidgetWin_1",
					name2: "*",
					cn2: "PX_WINDOW_CLASS",
					of1: default,
					of2: default
					);
			}
			
			static void FindWindow8() {
				
				FindAndLocateWindows(
					dx: 512,
					dy: 128,
					path: (TOTAL_COMMANDER_PATH, NETBEANS_PATH),
					name1: "Total Commander (x64) 11.03*",
					cn1: "TTOTAL_CMD",
					name2: "Apache NetBeans IDE 23",
					cn2: "SunAwtFrame",
					of1: default,
					of2: "netbeans64.exe"
					);
			}
			static void Click1() {
				
				using (opt.scope.all()) { //recorded
					opt.mouse.MoveSpeed = opt.key.KeySpeed = opt.key.TextSpeed = 8;
					var w1 = wnd.find(0, "Cinema – mainWindow.py", "SunAwtFrame").Activate();
					
					var w3 = wnd.find(1, "Cinema – mainWindow.py", "SunAwtFrame");
					string image1 = @"image:iVBORw0KGgoAAAANSUhEUgAAADoAAAA6CAYAAADhu0ooAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAInSURBVGhD7Zjda9pQGIf9SzbYbWOWpGrbmNhqrP1IXVHnxxI/+uGgDEaht4UxGKwwdjWU7Wpsa9kQu7/xN87J9MKUMdGj4fVcPCQc3hN4kvPmfc+JrcU1rAKxyQGqSFFqSFFqSFFqSFFqSFFqSFFqSFFqCBVVnupI5E1Y9SySuyYUTQ/FLAphonFDR+5iH/7tGTq/X6L16wxHb8tIFkysqeF40QgT3XRtlD420Bl20R6c8ysT9r6foHDpQrdSoTkiESZqVbOo9nzU+k1kmnkOu2eyjNpnH9vtPNTEemiuCMSK9n0Ou2djejqF3dcuvG8nXLY97KL0oY6t4wzP58lnzJOFinJUjefp0Zsymj+D/GVX97qEhLMVes68WLzoXxTNgFnaRpnl8X2wnF987cB5dQDNTIbiZ2VpoiPUZAI7pwXUv7TG+fu858H2HMTX55e/Sxcdodsb2Lsqwv8R5G9rcI7j91WkDq25lKPIiDIUVUdqP41n7ypBSWJf95OHdHknFDstkRIdoegGrEaOL+HOfZfX3Vm7qsiK2o0cr8PtsagRipuGSIk+uHR7HtKV/5v/LyIj+uDP6KaKDdfmL2AyflqWLkq+vNBvGFahBaTb1PNtmo9M06G7Tdss2uP8aw26dDfeccOAc3EA/+40KBdUj1IYLO/YoZhVy/JDslnbuFkQKholpCg1pCg1pCg1pCg1pCg1pCg1pCg1pCg1pCg1Yo8eP8Eq8AfVZnzV4ETBlQAAAABJRU5ErkJggg==";
					var im1 = uiimage.find(1, w3, image1);
					im1.MouseClick();
					
					 /* client "Cinema – mainWindow.py" *//*image:WkJNG7UIAMR/GJfvNLLSTOIf8eekdG1motPFqRT//DX5Md/1QitxQJVWYC30K2mjgQ6YJjgchDfqqkjI8My3fvs9gmL3FDBXjYAFZIHNWQAx2JvqsdN49nUcbK2RWBoDHy93SGcmkT+TieiMMHS0NCI0KBAlS3k42l5HFqcgvjgaHm7OiIgJQXpyAlKbErALCKnIWpiudIqkY2IvjqrNKoRrCxZSGmGW579SKV92ets6eTh9UArzhCyMyhA7gTocKANhoMEH0e1fHHomcxGDqWGBZwtPGQyk1gj+L8KzaBC9RPTpK58vQTjR683OgQtFraHUoSyO1h6B4Q3tTKzR8FJep+KZTyn4M00pQq2CYPNMmI+huVO0snwzS6EO2ScoofQ5MjQ+TQVVzFDBNSa5xjxW/MbG9Z/ONWdwzUl8cx7XnFoA5tYGOgSrX2iDyNwbVdDmGA==*/
							Thread.Sleep(4000);
					var w2 = wnd.find(10, "Киноафиша", "FLUTTER_RUNNER_WIN32_WINDOW");
					mouse.click(w2, 732, 51); /* client "FLUTTERVIEW" *//*image:WkJNG3kIAMRmd21BQIG1BQGFeSARBkw9PWzAccA4bAMvk/odIA511StICWeIEhhiyvRd//8OAw==*/
					
					w2.Activate();
					keys.send("^фв=", "Back*3 ^admin", "Tab ^фв=", "Back*3 ^admin", "Tab Enter");
				}
			}
		}
		#endregion
	}
}

				
				
				
				
